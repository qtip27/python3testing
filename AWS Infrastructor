#Resources
#VPC
resource "aws_vpc" "mtc_vpc" {
  cidr_block           = ""
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "Dev"
  }
}

#SUBNET'S
resource "aws_subnet" "mtc_public_subnet" {
  vpc_id                  = aws_vpc.mtc_vpc.id #Referencing the VPC above with the ID of that VPC
  cidr_block              = ""
  map_public_ip_on_launch = true
  availability_zone       = ""

  tags = {
    Name = "dev-public"
  }
}

#INTERNET GATEWAY
resource "aws_internet_gateway" "mtc_internet_gateway" {
  vpc_id = aws_vpc.mtc_vpc.id

  tags = {
    Name = "dev-igw"
  }
}

#ROUTING TABLE
resource "aws_route_table" "mtc_public_rt" {
  vpc_id = aws_vpc.mtc_vpc.id

  tags = {
    Name = "dev_public_rt"
  }
}

#DEFAULT ROUTE
resource "aws_route" "default_route" {
  route_table_id         = aws_route_table.mtc_public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.mtc_internet_gateway.id
}

#ROUTING TABLE ASSOC.
resource "aws_route_table_association" "mtc_public_assoc" {
  subnet_id      = aws_subnet.mtc_public_subnet.id
  route_table_id = aws_route_table.mtc_public_rt.id
}

#SECURITY GROUP
resource "aws_security_group" "mtc_sg" {
  name        = "dev_sg"
  description = "dev security group"
  vpc_id      = aws_vpc.mtc_vpc.id

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

#KEY PAIR
resource "aws_key_pair" "mtc_auth" {
  key_name   = ""
  public_key = file("")
}

#EC2 INSTANCE W/ SSH CONFIG. (NEED TO UPDATE THE USERDATA)
resource "aws_instance" "dev_node" {
  instance_type          = "t2.micro"
  ami                    = data.aws_ami.server_ami.id
  key_name               = aws_key_pair.mtc_auth.id
  vpc_security_group_ids = [aws_security_group.mtc_sg.id]
  subnet_id              = aws_subnet.mtc_public_subnet.id
  user_data              = file("")

  root_block_device {
    volume_size = 10
  }

  tags = {
    Name = "dev-node"
  }
  provisioner "local-exec" {
    command = templatefile("${}-ssh-config.tpl", {
      hostname     = self.public_ip,
      user         = "ubuntu"
      identityfile = ""
    })
    interpreter = var.host_os == "windows" ? ["Powershell", "-Command"] : ["bash", "-c"]
  }
}

#NETWORK FIREWALL WITH IPS RULES
resource "aws_networkfirewall_rule_group" "mtc_rule" {
  capacity = 100
  name     = "mtc_rule"
  type     = "STATEFUL"
  rules    = file("")

  tags = {
    Tag1 = "Value1"
    Tag2 = "Value2"
  }
}
resource "aws_networkfirewall_firewall_policy" "mtc_policy" {
  name = "mtc_rule"

  firewall_policy {
    stateless_default_actions          = ["aws:pass"]
    stateless_fragment_default_actions = ["aws:drop"]
    stateless_rule_group_reference {
      priority     = 1
      resource_arn = aws_networkfirewall_rule_group.mtc_rule.arn
    }
  }

  tags = {
    Tag1 = "Value1"
    Tag2 = "Value2"
  }
}

resource "aws_networkfirewall_firewall" "mtc_firewall" {
  name                = "mtc_firewall"
  firewall_policy_arn = aws_networkfirewall_firewall_policy.mtc_policy.arn
  vpc_id              = aws_vpc.mtc_vpc.id
  subnet_mapping {
    subnet_id = aws_subnet.mtc_public_subnet.id
  }

  tags = {
    Tag1 = "Value1"
    Tag2 = "Value2"
  }
}

#VPC FLOW LOGS (NEED TO FINISH DEFINING ALL PARTS)
/*
resource "aws_flow_log" "mtc_flow" {
  iam_role_arn    = aws_iam_role.vpc_flow_logs.arn
  log_destination = aws_cloudwatch_log_group.vpc_flow_logs.arn
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.mtc_vpc.id
}
*/

resource "aws_cloudwatch_log_group" "vpc_flow_logs" {
  name = "vpc_flow_logs"
}

resource "aws_iam_role" "example" {
  name = "example"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "vpc-flow-logs.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "example" {
  name = "example"
  role = aws_iam_role.example.id

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}
